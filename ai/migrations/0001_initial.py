# Generated by Django 4.2.1 on 2023-05-23 09:27

from decimal import Decimal
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AIModel',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, db_index=True, default=None, editable=False, null=True)),
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False, unique=True, verbose_name='pk')),
                ('description', models.TextField(blank=True, default='', verbose_name='description')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='create_time')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='update_time')),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(blank=True, default='-', max_length=255)),
            ],
            options={
                'db_table': 'ai_model',
                'db_table_comment': 'ai model table',
                'ordering': ['name', 'category'],
                'db_tablespace': 'ai_model',
            },
        ),
        migrations.CreateModel(
            name='Licence',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, db_index=True, default=None, editable=False, null=True)),
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False, unique=True, verbose_name='pk')),
                ('description', models.TextField(blank=True, default='', verbose_name='description')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='create_time')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='update_time')),
                ('name', models.CharField(default='', max_length=255, verbose_name='name')),
                ('content', models.TextField(default='', verbose_name='content')),
            ],
            options={
                'db_table': 'ai_model_licence',
                'db_table_comment': 'licence table',
                'db_tablespace': 'ai_model_licence',
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, db_index=True, default=None, editable=False, null=True)),
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False, unique=True, verbose_name='pk')),
                ('description', models.TextField(blank=True, default='', verbose_name='description')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='create_time')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='update_time')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='ai.aimodel', verbose_name='model')),
            ],
            options={
                'db_table': 'ai_subscription',
                'db_table_comment': 'user subscription',
                'db_tablespace': 'ai_subscription',
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, db_index=True, default=None, editable=False, null=True)),
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False, unique=True, verbose_name='pk')),
                ('description', models.TextField(blank=True, default='', verbose_name='description')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='create_time')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='update_time')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('models', models.ManyToManyField(through='ai.Subscription', to='ai.aimodel', verbose_name='models')),
                ('users', models.ManyToManyField(through='ai.Subscription', to=settings.AUTH_USER_MODEL, verbose_name='users')),
            ],
            options={
                'db_table': 'ai_topic',
                'db_table_comment': 'topic which users can subscribe',
                'db_tablespace': 'ai_topic',
            },
        ),
        migrations.AddField(
            model_name='subscription',
            name='topic',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ai.topic', verbose_name='topic'),
        ),
        migrations.AddField(
            model_name='subscription',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='user'),
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, db_index=True, default=None, editable=False, null=True)),
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False, unique=True, verbose_name='pk')),
                ('description', models.TextField(blank=True, default='', verbose_name='description')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='create_time')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='update_time')),
                ('score', models.DecimalField(choices=[(Decimal('0'), '0.0'), (Decimal('0.5'), '0.5'), (Decimal('1'), '1.0'), (Decimal('1.5'), '1.5'), (Decimal('2'), '2.0'), (Decimal('2.5'), '2.5'), (Decimal('3'), '3.0'), (Decimal('3.5'), '3.5'), (Decimal('4'), '4.0'), (Decimal('4.5'), '4.5'), (Decimal('5'), '5.0')], decimal_places=1, default=0.0, max_digits=2, verbose_name='score')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='ai.aimodel', verbose_name='model')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'db_table': 'ai_score',
                'db_table_comment': 'user score',
                'db_tablespace': 'ai_score',
            },
        ),
        migrations.CreateModel(
            name='ModelSku',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, db_index=True, default=None, editable=False, null=True)),
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False, unique=True, verbose_name='pk')),
                ('description', models.TextField(blank=True, default='', verbose_name='description')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='create_time')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='update_time')),
                ('version', models.URLField(default='', max_length=255, verbose_name='version')),
                ('size', models.PositiveBigIntegerField(default=0, verbose_name='storage size')),
                ('url', models.URLField(blank=True, default='', max_length=512, verbose_name='url')),
                ('encryption', models.CharField(default='', max_length=128, verbose_name='encryption')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='ai.aimodel', verbose_name='base ai')),
            ],
            options={
                'db_table': 'ai_model_sku',
                'db_table_comment': 'model sku table',
                'db_tablespace': 'ai_model_sku',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, db_index=True, default=None, editable=False, null=True)),
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False, unique=True, verbose_name='pk')),
                ('description', models.TextField(blank=True, default='', verbose_name='description')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='create_time')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='update_time')),
                ('name', models.CharField(max_length=255)),
                ('icon', models.URLField(blank=True, default='', max_length=512, verbose_name='url')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='ai.category')),
            ],
            options={
                'db_table': 'ai_model_category',
                'db_table_comment': 'model category table',
                'db_tablespace': 'ai_model_category',
            },
        ),
        migrations.AddField(
            model_name='aimodel',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ai.category'),
        ),
        migrations.AddField(
            model_name='aimodel',
            name='license',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ai.licence'),
        ),
        migrations.AddField(
            model_name='aimodel',
            name='publish_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='publish_user', to=settings.AUTH_USER_MODEL, verbose_name='publisher'),
        ),
        migrations.AddField(
            model_name='aimodel',
            name='subscribed_users',
            field=models.ManyToManyField(related_name='subscribed_users', through='ai.Subscription', to=settings.AUTH_USER_MODEL, verbose_name='subscribed users'),
        ),
        migrations.AddIndex(
            model_name='topic',
            index=models.Index(db_tablespace='ai_topic', fields=['name'], name='idx_name'),
        ),
        migrations.AddIndex(
            model_name='subscription',
            index=models.Index(db_tablespace='ai_subscription', fields=['user', 'model', 'topic'], name='idx_user_model_topic'),
        ),
        migrations.AlterUniqueTogether(
            name='subscription',
            unique_together={('user', 'model', 'topic')},
        ),
        migrations.AddIndex(
            model_name='score',
            index=models.Index(db_tablespace='ai_score', fields=['user', 'model'], name='idx_user_model'),
        ),
        migrations.AlterUniqueTogether(
            name='score',
            unique_together={('user', 'model')},
        ),
        migrations.AddIndex(
            model_name='modelsku',
            index=models.Index(db_tablespace='ai_model_sku', fields=['model', 'version'], name='idx_model_version'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(db_tablespace='ai_model_category', fields=['name', 'parent'], name='idx_name_parent'),
        ),
        migrations.AddIndex(
            model_name='aimodel',
            index=models.Index(db_tablespace='ai_model', fields=['name', 'category'], name='idx_name_category'),
        ),
    ]
